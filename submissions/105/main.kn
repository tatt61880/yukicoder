func main()
	var N: int :: cui@input().toInt(&)
	for(1, N)
		do cui@input()
		var ansRad: float :: lib@toRad(50.0)
		var x: []float :: #[6]float
		var y: []float :: #[6]float
		var cx: float :: 0.0
		var cy: float :: 0.0
		for i(0, 5)
			var ss: [][]char :: cui@input().split(" ")
			do x[i] :: ss[0].toFloat(&)
			do y[i] :: ss[1].toFloat(&)
			do cx :+ x[i]
			do cy :+ x[i]
		end for
		do cx :/ 6.0
		do cy :/ 6.0
		for i(0, 5)
			var rot: float :: lib@invRot(cx, cy, x[i], y[i])
			do rot :+ 10.0 ^ -9.0
			do rot :% 2.0 * lib@pi
			if(rot < ansRad)
				do ansRad :: rot
			end if
		end for
		do cui@print("\{lib@toDegree(ansRad).toStrFmt(".15f")}\n")
	end for
end func
