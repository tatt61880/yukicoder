func main()
	var n: int :: cui@inputInt()
	var ans: modInt :: (#modInt).init(3, 10 ^ 9 + 7)
	do ans.pow(n - 1)
	do ans.add(n % 2 = 0 ?(1, -1))
	do ans.mul(3)
	do ans.div(4)
	do cui@print("\{ans}\n")
	
	class modInt()
		+var val: int
		var mod: int
		+func init(val: int, mod: int): modInt
			do me.val :: val % mod
			do me.mod :: mod
			ret me
		end func
		+func add(a: int): modInt
			do me.val :+ a
			if(me.val > me.mod)
				do me.val :- me.mod
			end if
			ret me
		end func
		+func sub(a: int): modInt
			if(me.val < a)
				do me.val :+ me.mod
			end if
			do me.val :- a
			ret me
		end func
		+func mul(a: int): modInt
			do me.val :: math@modMul(me.val, a, me.mod)
			ret me
		end func
		+func div(a: int): modInt
			do me.val :: me.val * math@modPow(a, me.mod - 2, me.mod) % me.mod
			ret me
		end func
		+func pow(a: int): modInt
			do me.val :: math@modPow(me.val, a, me.mod)
			ret me
		end func
		+*func toStr(): []char
			ret "\{me.val}"
		end func
	end class
end func
