func main()
	var t: int :: cui@inputInt()
	for(1, t)
		var ans: int :: solve()
		do cui@print("\{ans}\n")
	end for
	
	func solve(): int
		var n: int :: cui@inputInt()
		var l: []int :: #[n]int
		for i(0, n - 1)
			do l[i] :: cui@inputInt()
		end for
		do l.sort()
		
		var ok: int
		var ng: int :: n / 3 + 2
		while((ok - ng).abs() > 1)
			var mid: int :: (ok + ng) / 2
			if(isPossible(l, mid))
				do ok :: mid
			else
				do ng :: mid
			end if
		end while
		ret ok
		
		func isPossible(l: []int, targetNum: int): bool
			var num: int
			var cnt: int
			var prev: int :: -1
			for i(0, ^l - 1)
				if(l[i] <> prev)
					do cnt :: 0
				end if
				do cnt :+ 1
				if(cnt <= targetNum)
					do num :+ 1
				end if
				do prev :: l[i]
			end for
			ret num >= 3 * targetNum
		end func
	end func
end func