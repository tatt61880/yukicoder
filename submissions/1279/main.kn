func main()
	var n: int :: cui@inputInt()
	var a: []int :: #[n]int
	for i(0, n - 1)
		do a[i] :: cui@inputInt()
	end for
	var b: []int :: #[n]int
	for i(0, n - 1)
		do b[i] :: cui@inputInt()
	end for
	
	var idxs: []int :: lib@range(0, n - 1, 1)
	
	var maxScore: int :: -1
	var cnt: int :: 0
	while(nextPermutation(idxs), skip)
		var score: int :: 0
		for i(0, n - 1)
			if(a[idxs[i]] > b[i])
				do score :+ a[idxs[i]] - b[i]
			end if
		end for
		
		if(score = maxScore)
			do cnt :+ 1
		elif(score > maxScore)
			do maxScore :: score
			do cnt :: 1
		end if
	end while
	
	var ans: int :: cnt
	do cui@print("\{ans}\n")
	
	func nextPermutation(arr: []int): bool
		var len: int :: ^arr
		var left: int :: len - 2
		while(left >= 0 & arr[left] >= arr[left + 1])
			do left :- 1
		end while
		if(left < 0)
			ret false
		end if
		var right: int :: len - 1
		while(arr[left] >= arr[right])
			do right :- 1
		end while
		var tmp: int :: arr[left]
		do arr[left] :: arr[right]
		do arr[right] :: tmp
		do left :+ 1
		do right :: len - 1
		while(left < right)
			do tmp :: arr[left]
			do arr[left] :: arr[right]
			do arr[right] :: tmp
			do left :+ 1
			do right :- 1
		end while
		ret true
	end func
end func
