func main()
	var p: []@Point :: #[5]@Point
	for i(0, 4)
		var x: int :: cui@inputInt()
		var y: int :: cui@inputInt()
		do p[i] :: (#@Point).init(x, y)
	end for
	var ans: bool :: ^@convexHull(p) = 5
	do cui@print((ans ?("YES", "NO")) ~ "\n")
end func

class Point()
	+var x: int
	+var y: int
	+func init(x: int, y: int): Point
		do me.x :: x
		do me.y :: y
		ret me
	end func
	+func cross(a: Point, b: Point): int
		ret(a.x - me.x) * (b.y - me.y) - (a.y - me.y) * (b.x - me.x)
	end func
	+*func cmp(t: kuin@Class): int
		if(me.x < (t $ Point).x)
			ret - 1
		elif(me.x > (t $ Point).x)
			ret 1
		elif(me.y < (t $ Point).y)
			ret - 1
		elif(me.y > (t $ Point).y)
			ret 1
		end if
		ret 0
	end func
end class

; 凸包を求める。
func convexHull(p: []@Point): []@Point
	var n: int :: ^p
	var k: int :: 0
	var res: []@Point :: #[n + 1]@Point
	do p.sort()
	for i(0, n - 1)
		while(k >= 2 & res[k - 2].cross(res[k - 1], p[i]) <= 0)
			do k :- 1
		end while
		do res[k] :: p[i]
		do k :+ 1
	end for
	var t: int :: k + 1
	for i(n - 2, 0, -1)
		while(k >= t & res[k - 2].cross(res[k - 1], p[i]) <= 0)
			do k :- 1
		end while
		do res[k] :: p[i]
		do k :+ 1
	end for
	ret res.sub(0, k - 1)
end func
