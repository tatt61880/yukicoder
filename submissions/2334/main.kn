func main()
	var n: int :: cui@inputInt()
	var k: int :: cui@inputInt()
	
	var a: []int :: #[n]int
	for i(0, n - 1)
		do a[i] :: cui@inputInt()
	end for
	
	var dic: dict<int, int> :: #dict<int, int>
	for i(0, n - 1)
		var key: int :: a[i]
		var val: int :: dic.get(key, &)
		do dic.add(key, val + 1)
	end for
	
	var values: []int :: getValues(dic)
	do values.sort()
	do values.reverse()
	
	var ans: int :: 0
	for i(0, ^values - 1)
		do ans :+ 1
		do k :- values[i]
		if(k <= 0)
			break i
		end if
	end for
	
	do cui@print("\{ans}\n")
	
	func getValues(dic: dict<int, int>): []int
		var valueList: List :: #List
		do dic.forEach(callback, valueList $ kuin@Class)
		ret valueList.li.toArray()
		
		class List()
			+var li: list<int>
			*func ctor()
				do me.li :: #list<int>
			end func
		end class
		
		func callback(key: int, value: int, data: kuin@Class): bool
			do (data $ List).li.add(value)
			ret true
		end func
	end func
end func
