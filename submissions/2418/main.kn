func main()
	var n: int :: cui@inputInt()
	var uni: UnionFind :: (#UnionFind).init(2 * n)
	
	var m: int :: cui@inputInt()
	for(1, m)
		var u: int :: cui@inputInt() - 1
		var v: int :: cui@inputInt() - 1
		do uni.unite(u, v)
	end for
	
	var arr: []int :: #[2 * n + 1]int
	for i(0, 2 * n - 1)
		do arr[uni.size(i)] :+ 1
	end for
	
	var ans: int :: 0
	for i(1, 2 * n - 1, 2)
		do ans :+ arr[i] / i
	end for
	do ans :/ 2
	do cui@print("\{ans}\n")
	
	class UnionFind()
		var parents: []int
		+func init(n: int): UnionFind
			do me.parents :: [-1].repeat(n)
			ret me
		end func
		+func size(x: int): int
			ret -me.parents[me.root(x)]
		end func
		+func same(x: int, y: int): bool
			ret me.root(x) = me.root(y)
		end func
		+func unite(x: int, y: int): bool
			do x :: me.root(x)
			do y :: me.root(y)
			if(x = y)
				ret false
			end if
			if(me.size(x) < me.size(y))
				do me.parents[y] :+ me.parents[x]
				do me.parents[x] :: y
			else
				do me.parents[x] :+ me.parents[y]
				do me.parents[y] :: x
			end if
			ret true
		end func
		
		func root(x: int): int
			if(me.parents[x] < 0)
				ret x
			else
				do me.parents[x] :: me.root(me.parents[x])
				ret me.parents[x]
			end if
		end func
	end class
end func
