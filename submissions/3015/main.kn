func main()
	var a: int :: cui@inputInt()
	var b: int :: cui@inputInt()
	var map: dict<int, []char> :: #dict<int, []char>
	for i(0, 10 ^ 8)
		var s: []char :: str(i)
		var hash: int :: getHash(s, a, b)
		var t: []char :: map.get(hash, &)
		if(t <>& null & ^s = ^t)
			do cui@print("\{s}\n")
			do cui@print("\{t}\n")
			ret
		end if
		do map.add(hash, s)
	end for
	
	func getHash(s: []char, a: int, b: int): int
		var res: int :: 0
		for i(0, ^s - 1)
			do res :: (res * a + s[i] $ int) % b
		end for
		ret res
	end func
	
	func str(n: int): []char
		var res: []char :: ""
		while(n <> 0, skip)
			do res :~ ['a'.offset(n % 26)]
			do n :/ 26
		end while
		ret res
	end func
end func
