func main()
	var n: int :: cui@inputInt()
	var v: []int :: #[n]int
	var w: []int :: #[n]int
	var vSum: int :: 0
	var wSum: int :: 0
	for i(0, n - 1)
		do v[i] :: cui@inputInt()
		do w[i] :: cui@inputInt()
		do vSum :+ v[i]
		do wSum :+ w[i]
	end for
	var val: int :: cui@inputInt()
	
	var ansMin: int
	var ansMax: int
	block
		var ok: int :: 0
		var ng: int :: wSum + 1
		while((ok - ng).abs() > 1)
			var mid: int :: (ok + ng) / 2
			var res: int :: f(n, v, w, mid)
			if(res < val)
				do ok :: mid
			else
				do ng :: mid
			end if
		end while
		do ansMin :: ok + 1
	end block
	block
		var ok: int :: 0
		var ng: int :: wSum + 1
		while((ok - ng).abs() > 1)
			var mid: int :: (ok + ng) / 2
			if(f(n, v, w, mid) <= val)
				do ok :: mid
			else
				do ng :: mid
			end if
		end while
		do ansMax :: ok
	end block
	do cui@print("\{ansMin}\n")
	do cui@print("\{vSum = val ?("inf", "\{ansMax}")}\n")
	
	func f(n: int, v: []int, w: []int, weight: int): int
		; dp[i] = v
		; i: 重さの和
		; v: 価値の最大値
		var dp: []int :: #[weight + 1]int
		do dp[0] :: 1
		for j(0, n - 1)
			for i(weight, 0, -1)
				if(dp[i] <> 0 & i + w[j] <= weight)
					do dp[i + w[j]] :: lib@max(dp[i + w[j]], dp[i] + v[j])
				end if
			end for
		end for
		var res: int :: 0
		for i(0, weight)
			do res :: lib@max(res, dp[i])
		end for
		ret res - 1
	end func
end func
