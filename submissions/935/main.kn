func main()
	var n: int :: cui@inputInt()
	var s: []char :: cui@input()
	
	var nums: []int :: #[n + 1]int
	do nums[0] :: 0
	for i(1, n)
		do nums[i] :: nums[i - 1] + (s[i - 1] = 'E' ?(1, 0))
	end for
	
	var a: []int :: #[n]int
	for i(0, n - 1)
		do a[i] :: cui@inputInt()
	end for
	var cum: []int :: #[n + 1]int
	do cum[0] :: 0
	for i(1, n)
		do cum[i] :: cum[i - 1] + a[i - 1]
	end for
	
	var ans: []int :: [1000000001].repeat(n + 1)
	do ans[0] :: 0
	for i(0, n - 1)
		for j(i + 1, n)
			var val: int :: cum[j] - cum[i]
			var num: int :: nums[j] - nums[i]
			do ans[num] :: lib@min(ans[num], val)
		end for
	end for
	
	var q: int :: cui@inputInt()
	for(1, q)
		var k: int :: cui@inputInt()
		var ok: int :: 0
		var ng: int :: n + 1
		while((ok - ng).abs() > 1)
			var md: int :: (ok + ng) / 2
			if(ans[md] <= k)
				do ok :: md
			else
				do ng :: md
			end if
		end while
		do cui@print("\{ok}\n")
	end for
end func
